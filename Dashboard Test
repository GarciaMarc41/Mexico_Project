#THIS IS THE DASHBOARD TEST
#THE IMAGES NEED TO BE IN THE FOLDER WHERE THE CODE IS
#USUALLY IT NEED TO RELOD TO GO BACK FROM A CROSS SECTION GRAPHG 

from dash import Dash, html, dash_table, dcc, Output, Input, callback
import base64
import plotly.graph_objects as go
import pandas as pd
import plotly.colors as colors
from dash.dependencies import Output, Input, State
from matplotlib.colors import Normalize
import matplotlib.pyplot as plt
import dash
import plotly.io as pio
from dash import dash_table
import numpy as np

# Incorporate data
df = pd.read_csv('IEB_export_south_mexico.csv')
tolerance = 1e-6

# Read the images
with open('combined_map-Copy1.png', 'rb') as f:
    map_image_data = f.read()
    encoded_image = base64.b64encode(map_image_data).decode('utf-8')

with open("depth_map-Copy1.png", "rb") as file:
    depth_map_data = file.read()
    depth_map_encoded = base64.b64encode(depth_map_data).decode("utf-8")

with open("size_map-Copy1.png", "rb") as file:
    size_map_data = file.read()
    size_map_encoded = base64.b64encode(size_map_data).decode("utf-8")


# Define the coordinates of the rectangle
A = (-95.7, 15.5)
A_prime = (-94.7, 16.5)
B = (-95.1, 15)
B_prime = (-94.2, 16.2)
C = (-94.3, 14.5)
C_prime = (-93.6, 15.8)
D = (-93.7, 14.2)
D_prime = (-93, 15.4)
E = (-94.3, 14.5)
E_prime = (-93.6, 15.8)

# Initialize the app
app = Dash(__name__)

fig_map = go.Figure()
fig_cross_section = go.Figure()

app.layout = html.Div(
    [
        html.Div(children='Dashboard South Mexico', className='title'),
        html.Hr(),
        html.Div(
            [
                html.Div(
                    [
                        html.Button('Show Depth Map', id='button-depth'),
                        html.Button('Show Combined Map', id='button-combined'),
                        html.Button('Show Size Map', id='button-size'),
                        html.Button('Section 1', id='btn-nclicks-1', n_clicks=0),
                        html.Button('Section 2', id='btn-nclicks-2', n_clicks=0),
                        html.Button('Section 3', id='btn-nclicks-3', n_clicks=0),
                        html.Button('Section 4', id='btn-nclicks-4', n_clicks=0),
                        html.Div(id='container-button')
                    ],
                    className='button-container'
                ),
                html.Div(
                    id='info-container',
                    className='info-container'
                ),
                html.Div(
                    [
                        html.Div('', className='black-square'),
                        html.Div(
                            id='table-container',
                            className='table-container',
                            children=html.Div(
                                dash_table.DataTable(
                                    id='table',
                                    columns=[
                                        {"name": "Magnitude", "id": "Mag"},
                                        {"name": "Latitude", "id": "Lat"},
                                        {"name": "Longitude", "id": "Lon"},
                                        {"name": "Depth", "id": "Depth"},
                                        {"name": "Region", "id": "Region"},
                                    ],
                                    data=df.head(6).to_dict('records'),
                                    editable=False,
                                    sort_action='native',
                                    sort_mode='multi',
                                    style_table={'overflowX': 'scroll'},
                                    style_cell={'minWidth': '100px', 'width': '100px', 'maxWidth': '100px'},
                                    page_size=6,
                                    page_action='native'
                                ),
                                style={'height': '300px', 'overflowY': 'auto'}
                            )
                        ),
                        html.Div(
                            className='image-container',
                            id='container-button2',
                            style={
                                'position': 'absolute',
                                'top': '0',
                                'right': '0',
                                'width': '50%',
                                'height': 'auto'
                            },
                            children=html.Img(
                                id='image',
                                style={
                                    'width': '100%',
                                    'height': '100%',
                                    'object-fit': 'contain'
                                }
                            )
                        ),
                        
                    ],
                    className='image-container'
                )
            ],
            className='content-container'
        )
    ],
    className='main-container'
)


app.css.append_css({
    'external_url': 'https://codepen.io/chriddyp/pen/bWLwgP.css'
})


# Callback functions to update the image source
@app.callback(
    Output('image', 'src'),
    [Input('button-depth', 'n_clicks'),
     Input('button-combined', 'n_clicks'),
     Input('button-size', 'n_clicks')],
)
def update_image_source(btn_depth, btn_combined, btn_size):
    if btn_depth is None and btn_combined is None and btn_size is None:
        raise dash.exceptions.PreventUpdate
    else:
        ctx = dash.callback_context
        button_id = ctx.triggered[0]['prop_id'].split('.')[0]
        
        if button_id == 'button-depth':
            return 'data:image/png;base64,{}'.format(depth_map_encoded)
        elif button_id == 'button-combined':
            return 'data:image/png;base64,{}'.format(encoded_image)
        elif button_id == 'button-size':
            return 'data:image/png;base64,{}'.format(size_map_encoded)
        else:
            raise dash.exceptions.PreventUpdate


@app.callback(
    Output('info-container', 'children'),
    [Input('fig-map', 'clickData'),
     Input('fig-cross-section', 'clickData')]
)
def display_click_data(map_click_data, cross_section_click_data):
    ctx = dash.callback_context
    triggered_component = ctx.triggered[0]['prop_id'].split('.')[0]

    if triggered_component == 'fig-map' and map_click_data:
        # If a point on the map is clicked
        x = round(map_click_data['points'][0]['x'], 6)
        y = round(map_click_data['points'][0]['y'], 6)
        df_range = f"{x}, {y}"
        selected_point = df.loc[(df['Lon'].round(6) == x) & (df['Lat'].round(6) == y)]
    elif triggered_component == 'fig-cross-section' and cross_section_click_data:
        # If a point on the cross-section is clicked
        x = round(cross_section_click_data['points'][0]['x'], 6)
        y = -1 * round(cross_section_click_data['points'][0]['y'], 6)
        df_range = f"{x}, {y}"
        selected_point = df.loc[(df['Lon'].round(6) == x) ]
        
    else:
        # If no point is clicked or callback is not triggered by clicking
        return html.P("Click on a point to view information")

    print("Selected Point Information:")
    print(selected_point)
    print("Point Index:", x, y)
    print("Index Range of DataFrame:", df_range)

    # Check if selected_point is empty
    if selected_point.empty:
        return html.P("No data available for the clicked point.")

    # Generate the message with information about the clicked point
    message = f"Clicked Point Information:\n" \
              f"X Coordinate: {x}\n" \
              f"Y Coordinate: {y}\n" \
              f"Magnitude: {selected_point['Mag'].values[0]}\n" \
              f"Latitude: {selected_point['Lat'].values[0]}\n" \
              f"Longitude: {selected_point['Lon'].values[0]}\n" \
              f"Depth: {selected_point['Depth'].values[0]}\n" \
              f"Region: {selected_point['Region'].values[0]}"

    return html.P(message)













@app.callback(
    Output('container-button', 'children'),
    [Input('btn-nclicks-1', 'n_clicks'),
     Input('btn-nclicks-2', 'n_clicks'),
     Input('btn-nclicks-3', 'n_clicks'),
     Input('btn-nclicks-4', 'n_clicks')]
)
def update_plots(btn1, btn2, btn3, btn4):
    A = (-95.7, 15.5)
    A_prime = (-94.7, 16.5)
    B = (-95.1, 15)
    B_prime = (-94.2, 16.2)
    C = (-94.3, 14.5)
    C_prime = (-93.6, 15.8)
    D = (-93.7, 14.2)
    D_prime = (-93, 15.4)
    E = (-93, 13.9)
    E_prime = (-92.4, 15.1)

    button_info = [
        {
            'button': btn1,
            'points': [A, A_prime, B_prime, B, A],
            'msg': "Button 1 was most recently clicked"
        },
        {
            'button': btn2,
            'points': [B, B_prime, C_prime, C, B],
            'msg': "Button 2 was most recently clicked"
        },
        {
            'button': btn3,
            'points': [C, C_prime, D_prime, D, C],
            'msg': "Button 3 was most recently clicked"
        },
        {
            'button': btn4,
            'points': [D, D_prime, E_prime, E, D],
            'msg': "Button 4 was most recently clicked"
        }
    ]

    rectangle_points = []
    fig_map = go.Figure()  # Initialize the map plot
    fig_cross_section = go.Figure()  # Initialize the cross-section plot
    msg = "None of the buttons have been clicked yet"
    clicked_buttons = []

    for i, btn_info in enumerate(button_info):
        if btn_info['button']:
            clicked_buttons.append(i)

    if clicked_buttons:
        current_button_index = clicked_buttons[-1]
        rectangle_points = button_info[current_button_index]['points']
        fig_map, fig_cross_section = rectangle(rectangle_points)
        msg = button_info[current_button_index]['msg']

    # Check if any backward buttons were clicked
    backward_buttons = [btn1, btn2, btn3, btn4]
    backward_button_indices = [i for i, btn in enumerate(backward_buttons) if btn]
    if backward_button_indices:
        last_backward_index = backward_button_indices[-1]
        backward_button_index = (last_backward_index - 1) % len(button_info)
        rectangle_points = button_info[backward_button_index]['points']
        fig_map, fig_cross_section = rectangle(rectangle_points)
        msg = button_info[backward_button_index]['msg']
    
    # Check if any forward buttons were clicked
    forward_button_indices = [i for i, btn in enumerate(backward_buttons) if btn]
    if forward_button_indices:
        last_forward_index = forward_button_indices[-1]
        forward_button_index = (last_forward_index + 1) % len(button_info)
        rectangle_points = button_info[forward_button_index]['points']
        fig_map, fig_cross_section = rectangle(rectangle_points)
        msg = button_info[forward_button_index]['msg']
    

    
   # Create the map plot if rectangle points exist
    if rectangle_points:
        fig_map, fig_cross_section = rectangle(rectangle_points)

    # Create the map plot
    map_plot = dcc.Graph(id='fig-map', figure=fig_map)

    # Create the cross-section plot
    cross_section_plot = dcc.Graph(id='fig-cross-section', figure=fig_cross_section)


    
    return html.Div([
        map_plot,
        cross_section_plot,
        html.P(msg)
    ])
def generate_images(image_path, image_title):
    return html.Div([
        html.H2(image_title),
        html.Img(src=image_path, style={'width': '60%'})
    ])

def rectangle(rectangle_points):
    # Set up the map plot
    fig_map = go.Figure()

    df = pd.read_csv('IEB_export_south_mexico.csv')

    # Plot the rectangle
    rectangle_x = [point[0] for point in rectangle_points]
    rectangle_y = [point[1] for point in rectangle_points]
    fig_map.add_trace(go.Scatter(x=rectangle_x, y=rectangle_y, mode='lines', line=dict(color='blue', width=1)))

    # Filter earthquakes inside the rectangle
    filtered_df = df[(df['Lon'] >= min(rectangle_x)) & (df['Lon'] <= max(rectangle_x)) &
                     (df['Lat'] >= min(rectangle_y)) & (df['Lat'] <= max(rectangle_y))]

    # Create a color palette for the earthquakes
    cmap = colors.sequential.Viridis
    normalize = plt.Normalize(vmin=filtered_df['Depth'].min(), vmax=filtered_df['Depth'].max())
    colorscale = [[normalize(value), color] for value, color in zip(filtered_df['Depth'], cmap)]

    # Plot the earthquakes inside the rectangle
    fig_map.add_trace(go.Scatter(x=filtered_df['Lon'], y=filtered_df['Lat'],
                                mode='markers', marker=dict(color=filtered_df['Depth'], colorscale=colorscale)))

    # Set labels and title
    fig_map.update_layout(xaxis_title="Longitude", yaxis_title="Latitude", title="Region Selected")
    fig_map.update_layout(height=600, width=600, autosize=False)

    # Set up the cross-section plot
    fig_cross_section = go.Figure()

    # Plot the rectangle
    fig_cross_section.add_trace(go.Scatter(x=rectangle_x, y=rectangle_y, mode='lines', line=dict(color='red', width=1)))

    # Plot the earthquakes inside the rectangle
    fig_cross_section.add_trace(go.Scatter(x=filtered_df['Lon'], y=-filtered_df['Depth'],
                                           mode='markers', marker=dict(color=filtered_df['Depth'], colorscale=colorscale)))

    # Set labels and title
    fig_cross_section.update_layout(xaxis_title="Longitude", yaxis_title="Depth", title="Cross-Section")
    fig_cross_section.update_layout(height=600, width=600, autosize=False)

    return fig_map, fig_cross_section



# Run the app
import webbrowser

if __name__ == '__main__':
    # Get the URL of the running Dash app
    url = 'http://127.0.0.1:8050/'
    
    # Open the URL in a new browser window
    webbrowser.open_new(url)
    
    # Run the Dash app
    app.run_server(debug=True, dev_tools_ui=False, dev_tools_props_check=False)

