#THIS CODE GENERATES 3 MAPS WITH CROSS SECTIONS AND GRAPHS THEM IN SIZE, MAFNITUDE AND COMBINE PARAMETERS

import pygmt
import pandas as pd
import base64
from io import BytesIO
import numpy as np

data = pd.read_csv('IEB_export_south_mexico-Copy1.csv')

# Define A and A' coordinates
A = (-95.7, 15.5)
A_prime = (-94.7, 16.5)
B = (-95.1, 15)
B_prime = (-94.2, 16.2)
C = (-94.3, 14.5)
C_prime = (-93.6, 15.8)
D= (-93.7, 14.2)
D_prime = (-93, 15.4)
E = (-94.3, 14.5)
E_prime = (-93.6, 15.8)
E = (-93, 13.9)
E_prime = (-92.4, 15.1)

rectangle1 = [A, A_prime, B_prime, B, A]
rectangle2 = [B, B_prime, C_prime, C, B]
rectangle3 = [C, C_prime, D_prime, D, C]
rectangle4 = [D, D_prime, E_prime, E, D]

region = "-98/-91/13/19"

# Plotting data
fig = pygmt.Figure()

# Color palettes for topo
pygmt.makecpt(cmap='etopo1', series='-8000/8000/1000', continuous=True)

# etopo data file
topo_data = '@earth_relief_15s'

# Plot high res topography
fig.grdimage(grid=topo_data, region=region, projection='M4i', frame=True, shading=True)

# Adding coasts & base layer
fig.coast(shorelines=True, frame=True, borders=["1/0.8p,black", "2/0.5p,black", "3/0.5p,black"])
fig.basemap(region=region, frame=["af",])

# Color palette for eqlocations
pygmt.makecpt(cmap="viridis", series=[data.Depth.min(), data.Depth.max()])

# Plotting data points
fig.plot(x=data.Lon, y=data.Lat, style="c0.07c", fill=data.Depth, cmap=True, pen="black")
# Plotting rectangles and lines with labels
fig.plot(x=[point[0] for point in rectangle1], y=[point[1] for point in rectangle1], pen="1p,red", label="A-A'")
fig.plot(x=[point[0] for point in rectangle2], y=[point[1] for point in rectangle2], pen="1p,green", label="B-B'")
fig.plot(x=[point[0] for point in rectangle3], y=[point[1] for point in rectangle3], pen="1p,yellow", label="C-C'")
#fig.plot(x=[F[0], F_prime[0]], y=[F[1], F_prime[1]], pen="1p,red", label="D-D'")
fig.plot(x=[point[0] for point in rectangle4], y=[point[1] for point in rectangle4], pen="1p,orange", label="E-E'")

# Adding legend
fig.legend(position="JTR+o0.2c", box=True)

# Save the figure as an image
image_path = "map.png"
fig.savefig(image_path, dpi=300, crop=True, transparent=True)

# Read the saved image and encode it
with open(image_path, "rb") as img_file:
    encoded_image = base64.b64encode(img_file.read()).decode()
    
fig.show()




# Create an array of size values within the range
magnitude_min = data.Mag.min()
magnitude_max = data.Mag.max()
size_categories = [0.1, 0.15, 0.2, 0.3, 0.35]
size_array = np.interp(data.Mag, (magnitude_min, magnitude_max), (0, len(size_categories)-1))
size_array = np.round(size_array).astype(int)
size_array = [size_categories[i] for i in size_array]

# Plotting size-coded data with high-res topography
fig_size = pygmt.Figure()

# etopo data file
topo_data = '@earth_relief_15s'

# Plot high res topography
fig_size.grdimage(grid=topo_data, region=region, projection='M4i', frame=True, shading=True)

# Define color palette based on the depth range
cpt_file = "depth.cpt"
depth_min = data["Depth"].min()
depth_max = data["Depth"].max()
depth_range = f"{depth_min}/{depth_max}"
pygmt.makecpt(cmap="jet", series=depth_range, output=cpt_file)

# Plot circles for each point, with color and size based on depth and magnitude
fig_size.plot(
    x=data["Lon"],
    y=data["Lat"],
    size=0.007 * 2 ** data["Mag"],
    fill=data["Depth"],
    cmap=cpt_file,
    style="cc",
    pen="black"
)

fig_size.plot(x=[point[0] for point in rectangle1], y=[point[1] for point in rectangle1], pen="1p,red", label="A-A'")
fig_size.plot(x=[point[0] for point in rectangle2], y=[point[1] for point in rectangle2], pen="1p,green", label="B-B'")
fig_size.plot(x=[point[0] for point in rectangle3], y=[point[1] for point in rectangle3], pen="1p,yellow", label="C-C'")
fig_size.plot(x=[point[0] for point in rectangle4], y=[point[1] for point in rectangle4], pen="1p,orange", label="D-D'")
fig_size.legend(position="JTR+o0.2c", box=True)

# Save the figure as an image
size_image_path = "size_map.png"
fig_size.savefig(size_image_path, dpi=300, crop=True, transparent=True)

# Read the saved image and encode it
with open(size_image_path, "rb") as img_file:
    encoded_image = base64.b64encode(img_file.read()).decode()

# Display the image
fig_size.show()




# Plotting size-coded data with high-res topography
fig_combined = pygmt.Figure()

# Plotting combined map


# etopo data file
topo_data = '@earth_relief_15s'

# Plot high res topography
fig_combined.grdimage(grid=topo_data, region=region, projection='M4i', frame=True, shading=True)

# Define color palette based on the depth range
cpt_file = "depth.cpt"
depth_min = data["Depth"].min()
depth_max = data["Depth"].max()
depth_range = f"{depth_min}/{depth_max}"
pygmt.makecpt(cmap="jet", series=depth_range, output=cpt_file)

# Plot circles for each point, with color and size based on depth and magnitude
fig_combined.plot(
    x=data["Lon"],
    y=data["Lat"],
    size=0.007 * 2 ** data["Mag"],
    fill= "red",
    style="cc",
    pen="black"
)

fig_combined.plot(x=[point[0] for point in rectangle1], y=[point[1] for point in rectangle1], pen="1p,red", label="A-A'")
fig_combined.plot(x=[point[0] for point in rectangle2], y=[point[1] for point in rectangle2], pen="1p,green", label="B-B'")
fig_combined.plot(x=[point[0] for point in rectangle3], y=[point[1] for point in rectangle3], pen="1p,yellow", label="C-C'")
fig_combined.plot(x=[point[0] for point in rectangle4], y=[point[1] for point in rectangle4], pen="1p,orange", label="D-D'")
fig_combined.legend(position="JTR+o0.2c", box=True)

# Save the figure as an image
combined_image_path = "combined_map.png"
fig_combined.savefig(combined_image_path, dpi=300, crop=True, transparent=True)

# Read the saved image and encode it
with open(combined_image_path, "rb") as img_file:
    encoded_image = base64.b64encode(img_file.read()).decode()

# Display the image
fig_combined.show()
